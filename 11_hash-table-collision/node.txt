Data Structures in JavaScript -  Part 9 ( Handling Collisions between Hash Tables )

рђАрђЏрђёрђ║рђАрђЋрђГрђ»рђёрђ║рђИрђЎрђЙрђг key рђђ рђљрђ░рђЏрђёрђ║ overwrite рђќрђ╝рђЁрђ║рђърђйрђгрђИрђљрђгрђЋрђ╝рђ▒рђгрђЂрђ▓рђирђљрђџрђ║
рђАрђ▓рђирђљрђгрђђрђГрђ» рђєрђђрђ║рђђрђ╝рђірђирђ║рђЎрђџрђ║

Collisions рђђрђГрђ» рђЉрђГрђћрђ║рђИрђюрђГрђ»рђирђЏрђљрђ▓рђи techniques рђљрђйрђ▒рђЏрђЙрђГрђљрђџрђ║
Linear probing
Separate chaining
Double Hashing
рђАрђ▓рђирђљрђгрђљрђйрђ▒рђърђ»рђХрђИрђЋрђ╝рђ«рђИрђЉрђГрђћрђ║рђИрђюрђГрђ»рђирђЏрђљрђџрђ║

.....................

Separate chaining
Separate Chaining is the collision resolution technique that is implemented using linked list.
рђърђ░рђђ linked list рђђрђГрђ» рђърђ»рђХрђИрђЋрђ╝рђ«рђИ рђќрђ╝рђ▒рђЏрђЙрђёрђ║рђИрђърђйрђгрђИрђљрђг

linked list рђђ рђЏрђ▒рђИрђЋрђ▒рђИрђЋрђ╝рђ«рђИрђърђгрђИ
Data Structures in JavaScript -  Part 6 ( Linked List -  only head)
https://www.facebook.com/permalink.php?story_fbid=122122577432102747&id=61553082429213


рђАрђ▓рђирђљрђ▒рђгрђи рђЁрђЅрђ║рђИрђЁрђгрђИрђђрђ╝рђірђирђ║рђђрђ╝рђірђирђ║
Clover => 27
Coverl => 27
рђљрђ░рђърђйрђгрђИрђЋрђ╝рђ«рђєрђГрђ»рђЏрђёрђ║ key рђўрђгрђърђГрђЎрђ║рђИрђќрђГрђ»рђирђюрђГрђ»рђюрђгрђЋрђ╝рђ« рђАрђ▓рђи рђАрђљрђйрђђрђ║ class
рђљрђЁрђ║рђЂрђ»рђЉрђЋрђ║рђЂрђйрђ▓рђюрђГрђ»рђђрђ║рђЎрђџрђ║

class ValuePair{
    constructor(key, value){
        this.key = key
        this.value = value
    }

    toString(){
        return '['+this.key+'-'+this.value+']'
    }
}


Linked List рђђрђГрђ» рђърђ»рђХрђИрђЎрђЙрђгрђќрђ╝рђЁрђ║рђюрђГрђ»рђи head рђЏрђЙрђГрђЎрђџрђ║ рђЉрђЋрђ║рђЉрђірђирђ║рђЏрђёрђ║
prepend method рђърђ»рђХрђИрђЎрђЙрђг рђќрђ╝рђЁрђ║рђюрђГрђ»рђи next null рђќрђ╝рђЁрђ║рђљрђ▓рђирђћрђ▒рђЏрђг рђЮрђёрђ║рђърђйрђгрђИрђЎрђџрђ║

рђЁрђЁрђЂрђ╗рђёрђ║рђИ Clover => 27 
27(index) => {
    "head": {
        "value": {
            "key": "Clover",
            "value": "A clover is a small plant with bright green leaves"
        },
        "next": null
    },
    "size": 1
}
рђАрђ▓рђирђюрђГрђ»рђЏрђЙрђГрђћрђ▒рђљрђџрђ║ рђђрђ╗рђћрђ▒рђгрђ║рђљрђГрђ»рђирђђ Coverl рђєрђГрђ»рђЋрђ╝рђ«рђИрђЉрђЋрђ║рђЉрђірђирђ║рђЏрђёрђ║ 
index (27) рђђ Clover(index => 27) рђћрђ▓рђи рђљрђ░рђћрђ▒рђЋрђ╝рђ« рђАрђ▓рђирђљрђ▒рђгрђи  
next null рђќрђ╝рђЁрђ║рђљрђ▓рђирђћрђ▒рђЏрђгрђЎрђЙрђг рђЉрђЋрђ║рђЉрђірђирђ║рђърђйрђгрђИрђЎрђЙрђг

27(index) => {
    "head": {
        "value": {
            "key": "Clover",
            "value": "A clover is a small plant with bright green leaves"
        },
        "next": {
            "value": {
                "key": "Coverl",
                "value": "testing"
            },
            "next": null
        }
    },
    "size": 2
}

рђЉрђЋрђ║рђЉрђірђирђ║рђюрђГрђ»рђи index рђђ рђЉрђЋрђ║рђљрђ░рђЂрђ▓рђирђЏрђёрђ║ next рђђ null рђќрђ╝рђЁрђ║рђљрђ▓рђирђћрђ▒рђЏрђгрђЎрђЙрђг
рђЉрђЋрђ║рђЉрђірђирђ║рђърђйрђгрђИрђЎрђЙрђг

.....................

Linear probing

рђърђ░рђђ index рђђ рђЏрђЙрђГрђЋрђ╝рђ«рђИрђърђгрђИрђєрђГрђ»рђЏрђёрђ║ index + 1 (1 рђЋрђ▒рђФрђёрђ║рђИрђЋрђ╝рђ«рђИ) рђЉрђЋрђ║рђЉрђірђирђ║рђърђйрђгрђИрђљрђг

рђЋрђЉрђЎрђЁрђЁрђЂрђ╗рђёрђ║рђИ Clover рђЉрђірђирђ║рђЎрђџрђ║
index рђђ 27, table рђЉрђ▓рђЎрђЙрђгрђърђйрђгрђИрђЏрђЙрђгрђЎрђџрђ║
рђърђ░рђирђћрђ▒рђЏрђг рђАрђюрђйрђљрђ║рђќрђ╝рђЁрђ║рђЂрђ▓рђирђЏрђёрђ║ Clover рђЉрђірђирђ║рђЎрђџрђ║

Clover рђЉрђЋрђ║рђЉрђірђирђ║рђЎрђџрђ║ рђърђйрђгрђИрђЏрђЙрђгрђљрђ▓рђирђАрђЂрђ╗рђГрђћрђ║
(27 рђђ рђЏрђЙрђГрђЋрђ╝рђ«рђИрђърђгрђИрђєрђГрђ»рђљрђ▒рђгрђи рђћрђ▒рђгрђђрђ║рђЉрђірђирђ║рђљрђгрђђ 28 рђћрђ▒рђЏрђг рђЏрђ▒рђгрђђрђ║рђърђйрђгрђИрђЎрђџрђ║)
Coverl => 28

table [
  <27 empty items>,
  ValuePair { key: 'Clover', value: 'A clover is a small plant.' },
  ValuePair { key: 'Coverl', value: 'testing' }
]

рђЉрђірђирђ║рђљрђгрђђ рђЏрђЋрђ╝рђ« GET рђђрђ╗рђЏрђёрђ║ рђўрђџрђ║рђюрђГрђ»рђЋрђ╝рђћрђ║рђЏрђЙрђгрђЎрђЙрђгрђюрђ▓ рђЉрђЋрђ║рђЁрђЅрђ║рђИрђЁрђгрђИрђђрђ╝рђірђирђ║рђЎрђџрђ║
Coverl рђђ рђЋрђ▒рђФрђёрђ║рђИрђЏрђёрђ║ 27 
27 рђђрђГрђ» рђђрђ╝рђірђирђ║рђюрђГрђ»рђђрђ║ рђАрђ▓рђирђђ key: "Clover" рђЎрђљрђ░рђўрђ░рђИ 1 рђЉрђЋрђ║рђљрђГрђ»рђИ
28 рђђрђГрђ» рђЉрђЋрђ║рђђрђ╝рђірђирђ║ key: 'Coverl' рђљрђ░рђљрђџрђ║ рђАрђ▓рђирђљрђгрђЉрђ»рђљрђ║рђЋрђ╝рђЏрђёрђ║рђЏрђЋрђ╝рђ«

.....................

Double Hashing

рђърђ░рђирђЎрђЙрђг hash function рђћрђЙрђЁрђ║рђЂрђ»рђюрђГрђ»рђљрђџрђ║ 
рђЋрђЉрђЎрђљрђЁрђ║рђЂрђ»рђђ рђАрђЏрђёрђ║рђђрђћрђ▓рђи рђљрђ░рђљрђџрђ║ key рђђрђГрђ» hash рђЋрђ╝рђ▒рђгрђёрђ║рђИрђљрђг
рђњрђ»рђљрђГрђџ рђљрђЁрђ║рђ»рђђ step size рђАрђљрђйрђђрђ║

(hash1(key) + i * hash2(key)) % TABLE_SIZE 



Code рђђ Linked List рђљрђйрђ▒рђЋрђФ рђЏрђ▒рђгрђърђ»рђХрђИрђЉрђгрђИрђљрђ▒рђгрђи 
рђЎрђ╗рђгрђИрђћрђ▒рђюрђГрђ»рђи рђњрђ«рђЎрђЙрђг рђЎрђЉрђірђирђ║рђЋрђ▒рђИрђЉрђгрђИрђўрђ░рђИ

https://github.com/sweet-clover/JS-DS-and-ALGO/tree/main/11_hash-table-collision
рђђрђ╝рђірђирђ║рђЂрђ╗рђёрђ║рђЏрђёрђ║ рђАрђЂрђ» link рђЉрђ▓рђЎрђЙрђг рђърђйрђгрђИрђђрђ╝рђірђирђ║рђюрђГрђ»рђирђЏрђЋрђФрђљрђџрђ║

­ЪЇђ­ЪЇђ­ЪЇђ­ЪЇђ