Data Structures in JavaScript -  Part 4 ( Priority Queue )

Queue (FIFO) First In, First Out
Part 3 မှာ Queue အကြောင်းရေးထားတယ်
အပြင်မှာဆိုရင် Counter ရှေ့မှာ တန်းစီနေသလိုပဲလေ 
(first come first served) အရင်လာတဲ့သူ အရင် ရမယ် 
တန်းစီနေတဲ့အချိန်မှာ အဘိုး/အဘွား တွေ ကိုယ်ဝန်ဆောက်မိခင်တွေ / ကိုယ်မကျန်းမာတဲ့ သူတွေရှိခဲ့ရင် first come first served က အဆင်မပြေတော့ဘူး သူတို့ကို ဦးစား ပေးရမယ်

အဲ့တော့ တန်းစီတဲ့ အချိန်မှာ သူ့ကို ဘယ်နေရာကို ပေးမလဲဆိုတာမျိုး သတ်မှတ် လို့ရတယ်

enqueue - မှာ တစ်ခါတည်း Priority သတ်မှတ်ပြီး ထည့်တဲ့ function လေးရေးကြည့်ကြမယ်

.................

Splice Method

အသစ်ထပ်ထည့်တဲ့ element ဆို {element: "Something", priority: num}
ဒီလို format နဲ့ထည့်မယ် ပြီးရင် priority ကို တိုက်စစ်ကြမယ်

[
  { item: 'David', priority: 1 },
  { item: 'Rose', priority: 2 },
  { item: 'Tom', priority: 3 }
]

Sample Data လေးရှိတယ် အဲ့မှာ ကျနော်တို့က အဘိုးတစ်ယောက်ကို ရှေ့ဆုံးမှာထားချင်တယ်
သူက David ရှေ့မှာ ဝင်သွားရမယ်
အဲ့မှာ ကျနော် တို့က ကိုယ်ဝန်သည် တစ်ယောက်ထပ်လာတယ် အဘိုးအို နောက်မှာ ထားမယ်
အဲ့တော့ သူက ဘယ်နေရာမှာ ဝင်မှာလဲဆိုတဲ့ index ကို ပြန်ရှာပြီး ပြန်ထည့်ပေးရမယ်

JavaScript မှာ splice ဆိုတဲ့ Array Method ရှိတယ် 

splice(start, deleteCount)
deleteCount က zero ဆို အသစ်ထပ်ထည့်သွားတယ်

arr.splice(0,0,{ item: 'Grandfather', priority: 0 })
arr => [
    { item: 'Grandfather', priority: 0 },
    { item: 'David', priority: 1 },
    { item: 'Rose', priority: 2 },
    { item: 'Tom', priority: 3 }
]

splice(start, deleteCount, item1)
deleteCount က 1 ဆိုရင် start က index  
(item1 ကို start (index) နေရာ replace လုပ်သွားတာ)

delete count က 1 ဆိုရင် David နေရာ သူဝင်သွားမှာ
arr.splice(0, 1, { item: 'Grandfather', priority: 0 })
arr => [
    { item: 'Grandfather', priority: 0 },
    { item: 'Rose', priority: 2 },
    { item: 'Tom', priority: 3 }
]

အဲ့တော့ Array splice က array ထဲကို အသစ်ထပ်ထည့်တာကော / ဖျက်တာကော /
ပြင်တာကော လုပ်လို့ရလို့ function တစ်ခုက အလုပ်တစ်ခုပဲလုပ်သင့်တယ်ဆိုတာနဲ့
မကိုက်ဖြစ်နေတော့ မသုံးသင့်ဘူးလည်းပြောကြမယ်



အဘိုးရဲ့နောက်မှာ ကိုယ်ဝန်ဆောက်သည်ကို ထပ်ထည့်မယ် သူ့ index က 1
(start => 1, delete count => 0)
arr.splice(1,0,{ item: 'Pregnant woman', priority: 0 })
console.log(arr)
[
    { item: 'Grandfather', priority: 0 },
    { item: 'Pregnant woman', priority: 0 },
    { item: 'David', priority: 1 },
    { item: 'Rose', priority: 2 },
    { item: 'Tom', priority: 3 }
]

.................

Priority Queue အတွက်က ထည့်လိုက်တဲ့ priority နဲ့ 
array ထဲက priority က ငယ်တဲ့နေရာကိုသွားရှာပြီး 
အသစ်ထည့်လိုက်တာပဲ


********************

class Queue {
    constructor() {
        this.items = []
    }

    enqueue(item, priority) {
        let element = { item, priority }
        // {item: item, priority: priority} ( key နဲ့ value က တူခဲ့ရင် 
        // {item, priority}) ဆိုပြီးရေးလို့ရတယ်

        let added = false; 
        // ကြားထဲကို ထည့်ဖြစ်လားစစ်မယ် မထည့်ဖြစ်ရင် 
        //နောက်ဆုံးက ထပ်ထည့်လိုက်မယ်

        for (let i = 0; i < this.items.length; i++) {
            //ဘယ်နေရာထည့်ရမလဲဆိုတာ ရှာရမှာမိုလို့ loop ပတ်ထားတာ

            if (element.priority < this.items[i].priority) {
                // နှစ်ခုတိုက်စစ် ငယ်ခဲ့ရင် တွေ့တဲ့ index နေရာ အသစ်ထပ်ထည့်တာ

                this.items.splice(i, 0, element);
                added = true;
                // ထည့်ပြီးသွားလား စစ်လိုက်တာ တကယ်လို့ priority က ကြီးတာမျိုး 
                // မပါခဲ့တာမျိုးဆိုရင် နောက်ဆုံးက ထပ်ထည့်ရမယ် 

                break;
                // ထည့်ပြီးရင် ဆက်မသွားတော့ ဘူး loop က ထွက်လိုက်တာ
            }
        }

        if (!added) {
            //  array ထဲမှာ မကိုက်လို့ နောက်ဆုံးက ထပ်ထည့်တာ
            this.items.push(element);
        }
    }

    print() {
        for (let i = 0; i < this.items.length; i++) {
            console.log(this.items[i]);
        }
    };
}

const queue = new Queue()

queue.enqueue("David", 1)
queue.enqueue("Rose", 2)
queue.enqueue("Tom", 3)
queue.enqueue("Grandfather", 0)
queue.enqueue("Pregnant woman", 0)
queue.enqueue("Lily")
queue.print()

// { item: 'Grandfather', priority: 0 }
// { item: 'Pregnant woman', priority: 0 }
// { item: 'David', priority: 1 }
// { item: 'Rose', priority: 2 }
// { item: 'Tom', priority: 3 }
// { item: 'Lily', priority: undefined }

********************
