Data Structures in JavaScript -  Part 10 ( Simple Hash Table )

Hashing ဆိုတာက Data Structure မှာ data ကို သိမ်းတာပြန်ထုတ်ပြတာ လုပ်တဲ့အချိန်  ပိုမြန်အောင်လို့ သုံးတာ 
Constant Time (O(1)) ဖြစ်အောင်အဲ့တာကိုသုံးပြီး ပြောင်းရေးလို့ရတယ်

Dictionary (Map) မှာ time တွက်ပြခဲ့တယ် အဲ့ထက်ပိုကောင်းအောင် လုပ်ချင်ရင် Hash Table သုံးလို့ရတယ်

"Clover" => "67+108+111+118+101+114" => "619"
Number တွေဘယ်လိုတွက်လဲသိချင်ရင် အောက်က link မှာ ဖတ်လို့ရပါတယ်
https://www.facebook.com/permalink.php?story_fbid=122127663404102747&id=61553082429213

hash_value = key % table_size
key က "619" 
table_size က ကျနော်တို့ မသတ်ထားရင် arbitrary number တစ်ခု သုံးလို့ရတယ်
hash အတွက်ဆိုရင် 37  သုံးကြတယ်

arbitrary number ဆိုတာက any number ဖြစ်နိုင်တယ်
3x + 5 = 11 အဲ့မှာဆိုရင် x က မသိကိန်း
ငယ်ငယ်တုန်းက သင်ခဲ့တယ်လေ x ကို 1 အစားသွင်းမယ်
3(1) + 5 != 11 (မပြေလည်ဘူး)
2 အစားသွင်းမယ် 3(2) + 5 = 11 
arbitrary number က 2 ပဲ 
.........................

Code ကြည့်ရအောင် Constructor ရှိမယ်
ပြီးရင် put(insert), remove(delete), get methods တွေရှိမယ်

class HashTable{
    constructor(){
        this.table = []
    }
}

.........................

ပြီးရင် key က string လာမှာဆိုတော့ Integer ပြောင်းတဲ့ method ရှိမယ်
"Clover" => "67+108+111+118+101+114" => 619 % 37 => 27
hash အတွက်ဆိုရင် 37  သုံးကြတယ်
% က အကြွင်းကိုယူတာ

function hashCode(key){
    let hash = 0
    for(let i = 0; i < key.length; i++){
        hash += key.charCodeAt(i)
    }
    return hash % 37
}

.........................

Put ကို စဉ်းစားကြည့်ရအောင် key, value ရှိမယ်
key က  "Clover" ပေးလိုက်မယ်
value က "A clover is a small plant with bright green leaves"
index ပြန်ရှာလိုက်တော့ 27

Constructor ထဲက table property က array
this.table[27] = value
အဲ့လိုဝင်သွားရမယ်

Note: မြင်လားတော့မရှိဘူး key ကို တိုက်ရိုက်မသုံးဘဲ index ပြောင်းသုံးသွားတာ

*************

put(key, value){
    let index = hashCode(key)
    this.table[index] = value
}

*************

table [
  <27 empty items>, 
  'A clover is a small plant with bright green leaves'
]
27 empty items - 0 to 26 က empty အနေနဲ့ရှိနေမယ်

.........................

GET 

GET ဆိုလည်း key နဲ့သွားရှာမှာ
key ကို index ပြောင်းပြီးခေါ်လိုက်ရင်ရပြီ

*************

 get(key){
    let index = hashCode(key)
    return this.table[index]
}

*************

.........................

Remove 

Remove ဆိုလည်း key ကို index ပြောင်းပြီး
array ထဲက ဖျက်လိုက်လည်းရပြီ

*************

remove(key){
    let index = hashCode(key)
    delete this.table[index]
}

*************

Sample Code

*************

function hashCode(key){
    let hash = 0
    for(let i = 0; i < key.length; i++){
        hash += key.charCodeAt(i)
    }
    return hash % 37
}

class HashTable{
    constructor(){
        this.table = []
    }

    put(key, value){
        let index = hashCode(key)
        this.table[index] = value
    }

    get(key){
        let index = hashCode(key)
        return this.table[index]
    }

    remove(key){
        let index = hashCode(key)
        delete this.table[index]
    }
}

let ht = new HashTable()
ht.put("Clover", "A clover is a small plant with bright green leaves")
ht.remove('Clover')
console.log("table", ht.get("Clover"))

*************

ဒီအတိုင်းဆိုရင် basic က ရပြီပြီ
ပြသနာက key က "Clover" ရှိပြီးသား
နောက်တစ်ခုကို "Coverl" ဆိုပြီးနောက်တစ်ခုထပ်ထည့်မယ်
သူတို့နှစ်ခုရဲ့ index က တူတူပဲဆိုရင် overwrite ဖြစ်သွားမယ်
Clover => 27
Coverl => 27

အဲ့တာကိုရှင်းဖို့လိုတယ် အဲ့ပြသနာကို (Handling collisions)
လို့ခေါ်တယ်

နောက်တစ်ပိုင်းမှာဆက်ကြည့်ကြမယ်

🍀🍀🍀🍀