Data Structures in JavaScript -  Part 12 ( Tree )

Tree က ကြားဖူးတယ် ဘယ်မှာသုံးလဲဆိုတော့ 

Browser က HTML file မှာရှိတဲ့ content ကိုယူတယ်
ပြီးရင် HTML Parser ကိုသုံးပြီး DOM tree ဆောက်တယ်
ဆိုတာ နားလည်ခဲ့တယ်

Tree က Hierarchical Structure (Parent -> child ) ပုံစံပဲ

...........................

Hierarchical Structure ဆိုတာက 
Company တစ်ခုမှာဆိုရင်

CEO အောက်မှာ Managers တွေရှိမယ် 
သူ့အောက်မှာ Developers တွေရှိမယ်
ပုံကို ကြည့်လိုက်ရင် ရှင်းသွားလိမ့်မယ်

Developers တွေအောက်မှာလည်း အများကြီးရှိနိုင်သေးတယ်
Flow ကိုရသွားရင် ဆက်ကြည့်မယ်

...................

ရှင်းရလွယ်အောင်လို့ value ကို Number ထည့်ပြီးရှင်းကြည့်မယ်

စစချင်းဘာမှ မရှိသေးဘူး 11 ထည့်လိုက်မယ်
root က 11 ဖြစ်သွားမယ်

linked list တို့မှာဆိုရင် နောက်ကထည့်တာရှိတယ်
ရှေ့က ထည့်တာရှိတယ်
tree မှာဆိုရင် သူ compare လုပ်ပြီးထည့်မှာ
ဘယ်လို compare လုပ်မှာလဲဆိုရင်

root နဲ့ယှဉ်ကြည့်မှာ 
root ထက်ကြီးလား ကြီးရင် Right ဘက်မှာထည့်မယ်
root ထက်ငယ်ရင် Left ဘက်မှာ ထည့်မယ်

7 ထပ်ထည့်မယ် 11(Root) ထက်ငယ်တယ် 
Left ကို ကြည့်လိုက်တယ် Null ဖြစ်နေလို့ 7 ထည့်လိုက်တယ်


15 ထပ်ထည့်မယ် root နဲ့ယှဉ်ကြည့်မယ်
root ထက်ကြီးလား ကြီးရင် Right Node ဘက်မှာထည့်မယ်
root ထက်ငယ်ရင် Left Node ဘက်မှာ ထည့်လိုက်မယ်
15 က 11(Root) ကြီးတော့ Right ဘက်မှာ ထည့်မယ်

     11(root)
7(left)   15(right)

5 ထပ်ထည့်မယ် 11(Root) ထက်ငယ်တယ် 
Left က Null မဟုတ်ဘူး 7 ရှိနေတယ်
7 နဲ့ 5 ကို compare လုပ်တယ်
7 ရဲ့ left က 5 ဖြစ်သွားမယ်

9 ထပ်ထည့်တယ် 11(Root) ထက်ငယ်တယ် 
Left က Null မဟုတ်ဘူး 7 ရှိနေတယ်
7 နဲ့ 9 ကို compare လုပ်တယ် ကြီးတော့
7 ရဲ့ right က 9 ဖြစ်သွားမယ်


15 ထပ်ထည့်တယ် Root ထက်ကြီးတယ်
Right က null ဖြစ်နေလို့ Right ဘက်မှာ ထည့်လိုက်တယ်

13 ထပ်ထည့်တယ် 11(Root) ထက်ကြီးတယ်
Right က 15 ဖြစ်နေလို့ 15 နဲ့ 13 ကို compare လုပ်တယ်
ငယ်လို့ Left ဘက် ထည့်လိုက်တယ်

20 ထပ်ထည့်တယ် 11(Root) ထက်ကြီးတယ်
Right က 15 ဖြစ်နေလို့ 15 နဲ့ 20 ကို compare လုပ်တယ်
ကြီးလို့ Right ဘက် ထည့်လိုက်တယ်


......................

insert လုပ်တဲ့ အပိုင်းကို နားလည်ပြီဆိုရင်
ပြန်ထုတ်ပြတဲ့ အပိုင်းကို ဆက်ကြည့်မယ်

stack, queue တို့ဆိုရင် linear အတိုင်း
ရှိနေတော့ ဒီတိုင်းထုတ်ပြလိုက်လို့ရတယ်

tree က ဘယ်လို ထုတ်ပြရမှာလဲဆိုတာမျိုးပေါ့
အဲ့တာကို Tree traversal လို့ခေါ်တယ် 

Pre-order traversal (Root, Left, Right)
In-order traversal (Left, Root, Right)
Post-order traversal (Left, Right, Root)

ကျနော်က Root ပေါ်မူတည်ပြီး အလွယ်မှတ်တယ်
pre ဆိုရင် Root က ရှေ့မှာ
in ဆိုရင် Root က အလယ်မှာ
post ဆိုရင် Root က နောက်မှာ
ကျန်တာက left, right ဆိုပြီးမှတ်တယ်

...........................

Pre-order traversal (Root, Left, Right)
ပုံကို ကြည့်နော် Root က စမယ် 11
Root Result => 11

ပြီးရင် Left ကိုကြည့်တော့ Node တွေ့တယ် (လေးထောင့်အနီနဲ့ဝိုင်းပြထားတယ်) 
Root, Left, Right ထပ်တွက်မယ် 
Root - 7, Left - 5, Right - 9
Left Result => 7,5,9

Root နဲ့ Left က ပြီးသွားပြီ (right ဘက်ကို ဆက်ကြည့်မယ်)
(လေးထောင့်အပြာနဲ့ဝိုင်းပြထားတယ်)
Root, Left, Right ထပ်တွက်မယ် 
Root - 15, Left - 13, Right - 20
Right Result => 15,13,20

Pre-order is 11,7,5,9,15,13,20

......................


In-order traversal (Left, Root, Right)

Left က စကြည့်မယ် (လေးထောင့်အနီနဲ့ဝိုင်းပြထားတယ်)
Left - 5, Root - 7, Right 9
Left Result => 5,7,9

Root က 11
Root Result => 11

Right ကိုဆက်ကြည့်မယ် (လေးထောင့်အပြာနဲ့ဝိုင်းပြထားတယ်)
Left - 13, Root - 15, Right 20
Right Result => 13,15,20

In-order is 5,7,9,11,13,15,20

......................

Post-order traversal (Left, Right, Root)

Left က စကြည့်မယ် (လေးထောင့်အနီနဲ့ဝိုင်းပြထားတယ်)
Left - 5, Right 9, Root - 7
Left Result => 5,9,7


Right ကိုဆက်ကြည့်မယ် (လေးထောင့်အပြာနဲ့ဝိုင်းပြထားတယ်)
Left - 13, Right 20, Root - 15
Right Result => 13,20,15

Root က 11
Root Result => 11

Post-order is 5,9,7,13,20,15,11


🍀🍀🍀🍀